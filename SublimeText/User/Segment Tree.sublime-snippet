<snippet>
	<content><![CDATA[
// Segment Tree
struct segmentTree {
    int mxN;
    vi st;
    void init(int n) {
        this->mxN = n;
        st.resize(4 * mxN, 0);
    }
    void build(int start, int end, vi &v, int root) {
        if (start == end) {
            st[root] = v[start];
            return;
        }
        int mid = (start + end) / 2;
        build(start, mid, v, 2 * root + 1);
        build(mid + 1, end, v, 2 * root + 2);
        st[root] = st[2 * root + 1] + st[2 * root + 2];
    }
    int query(int start, int end, int l, int r, int root) {
        if (start > r || end < l) {
            return 0;
        }
        if (start >= l && end <= r) {
            return st[root];
        }
        int mid = (start + end) / 2;
        int q1 = query(start, mid, l, r, 2 * root + 1);
        int q2 = query(mid + 1, end, l, r, 2 * root + 2);

        return q1 + q2;
    }
    void update(int start, int end, int indx, int val, int root) {
        if (start == end) {
            st[root] = val; return;
        }
        int mid = (start + end) / 2;
        if (indx <= mid) {
            update(start, mid, indx, val, (root << 1) + 1);
        }
        else {
            update(mid + 1, end, indx, val, (root << 1) + 2);
        }

        st[root] = st[2 * root + 1] + st[2 * root + 2];
    }

    void build(vi &v) {
        build(0, mxN - 1, v, 0);
    }
    int query(int l, int r) {
        query(0, mxN - 1, l, r, 0);
    }
    void update(int indx, int val) {
        update(0, mxN - 1, indx, val, 0);
    }
} tree;]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>SegmentTree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
